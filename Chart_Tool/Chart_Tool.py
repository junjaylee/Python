################################################# Distribution Chart tool  ---Update History## V1 : (Eve)#       Support Single Chart# V2 : (2016/04/25, Eve)#       Support Multi test item drawing#       Support Open limit/Single-side limit/Open limit test items# V3 : (2016/04/26, Eve)#       Support two types of distribution chart drawing#       a.auto drawing for all items in CSV (Action_Type =1)#       b.Specific item (Action_Type =2)# V4 : (2016/4/28, Ken)#       Support input arguments without prompt# V4a : (2016/05/05, Eve)#       a remove arraow and extend the length of lower/Upper limt line#       b.create 2nd plot to have CPk/mean/...information # V5 : Update draw ##################################################!/usr/bin/env python# -*- coding: utf-8 -*-import osimport sysimport pandas as pdimport seaborn as snsimport matplotlib.pyplot as pltimport mathfrom matplotlib import gridspecimport matplotlib.patches as patchesfrom pylab import np,savefigdef Func_CalcDigit(varTestData):    if (varTestData == 0):        return 1    AbsData = math.fabs(varTestData);    return math.floor(math.log10(AbsData))-1def Func_DrawChart(varDataSource,varUpper_Spec,varLower_Spec,varStation,varKeyword,varSavePath):    Max_Data = varDataSource.max()    Min_Data = varDataSource.min()    if (np.isnan(varUpper_Spec)):        Upper_Limit = Max_Data    else:        Upper_Limit = varUpper_Spec    if (np.isnan(varLower_Spec)):        Lower_Limit = Min_Data    else:        Lower_Limit = varLower_Spec    if (Max_Data < Upper_Limit):        Max_Data = Upper_Limit    if (Min_Data > Lower_Limit):        Min_Data = Lower_Limit    Mean_Data = varDataSource.mean()    Std_Data = varDataSource.std()    Sub_Data = math.fabs(Max_Data - Min_Data);    Digits = Func_CalcDigit(Sub_Data)    ext_data = math.pow(10,Digits) * 6    bins = np.linspace(Min_Data - ext_data, Max_Data + ext_data, 24)    plt.clf()    sns.set(style="white", palette="muted", color_codes=True)    plt.figure(figsize=(10, 6))    plt.subplots_adjust(wspace=0.25,left=0.02)    gs = gridspec.GridSpec(1, 2, width_ratios=[1.5, 4])    # draw distribution chart    ax = plt.subplot(gs[1])    plt.hist(varDataSource,bins)    ymin, ymax = ax.get_ylim()    if (not np.isnan(varUpper_Spec)):        plt.axvline(x=varUpper_Spec, color='r')        plt.text(varUpper_Spec,ymax*0.95,'%s' %(str(varUpper_Spec)),color='m')    if (not np.isnan(varLower_Spec) and varUpper_Spec != varLower_Spec):        plt.axvline(x=varLower_Spec, color='r')        plt.text(varLower_Spec,ymax*0.9,'%s' %(str(varLower_Spec)),horizontalalignment='right',color='m')    print ('[%s]-[Search Orignal Data ==> Min_Value = %f, Max_Value = %f]' %(varKeyword,Min_Data,Max_Data))    plt.title('%s -- %s \n[Qty = %d]' %(varStation,varKeyword,varDataSource.count()))    # draw rectangle for the cpk/mean/cpl info , 2016/05/06, Eve    fig1 = plt.subplot(gs[0])    fig1.add_patch(patches.Rectangle(                                     (0, 0),                                     1,                                     1,                                     fill=False      # remove background                                     ,linewidth=0.3)                   )    plt.axis('off')    if (np.isnan(varUpper_Spec)):         plt.text(0.02, .9, 'Upper_limit = NA', fontsize=12)        plt.text(0.02, .3, 'Cpu = NA', fontsize=12)    else:        plt.text(0.02, .9, 'Upper_limit = {0}'.format(varUpper_Spec), fontsize=12)        if (Std_Data == 0):            plt.text(0.02, .3, 'Cpu = inf', fontsize=12)        else:                Cpu = float(varUpper_Spec - Mean_Data) / (3*Std_Data)            plt.text(0.02, .3, 'Cpu = {:.3f}'.format(Cpu), fontsize=12)    if (np.isnan(varLower_Spec)):         plt.text(0.02, .8, 'Lower_limit = NA', fontsize=12)        plt.text(0.02, .2, 'Cpl = NA', fontsize=12)    else:        plt.text(0.01, .8, 'Lower_limit = {0}'.format(varLower_Spec), fontsize=12)        if (Std_Data == 0):            plt.text(0.01, .2, 'Cpl = inf', fontsize=12)        else:            Cpl = float(Mean_Data - varLower_Spec) / (3*Std_Data)            plt.text(0, .2, 'Cpl = {:.3f}'.format(Cpl), fontsize=12)    plt.text(0.02, .7, 'Max = {:.3f}'.format(varDataSource.max()), fontsize=12)    plt.text(0.02, .6, 'Min = {:.3f}'.format(varDataSource.min()), fontsize=12)    plt.text(0.02, .5, 'Mean = {:.3f}'.format(Mean_Data), fontsize=12)    plt.text(0.02, .4, 'Std = {:.3f}'.format(Std_Data), fontsize=12)    if (Std_Data == 0):        plt.text(0.02, .1, 'Cpk = inf', fontsize=12)    elif (not np.isnan(varUpper_Spec) and not np.isnan(varLower_Spec)):         plt.text(0.02, .1, 'Cpk = {:.3f}'.format(np.min([Cpu, Cpl])), fontsize=12)    else:        plt.text(0.02, .1, 'Cpk = NA', fontsize=12)    savefig(varSavePath)    plt.close('all')arg_total = len(sys.argv)if (arg_total == 4):    station_name = sys.argv[1]    File_Path = sys.argv[2]    Action_Type = sys.argv[3]else:    # initial file path and test item , eve    station_name = raw_input('Please input Station Name for Chart drawing (type QT0/QT1..)===>')    File_Path = raw_input('Please input CSV file information (Full Path)===>')    #key in action  type : (1) automatically create all distribution charts in CSV file  (2) Create distribution  chart by item , 2016/04/26,Eve    Action_Type = raw_input('Options to draw distribution chart :(1) All items or (2) Single item ? (please type 1 or 2) ===>')save_path = os.path.expanduser("~/Desktop/")+ station_nameif not os.path.exists(save_path):    os.mkdir(save_path)csvcontent = pd.read_csv(File_Path,skiprows=[0,2,3,6])col_names = csvcontent.columns.tolist()csvlimit = csvcontent[0:2].copy()KeepProgress ='Y'idx = csvcontent.columns.get_loc('StartTime')while (KeepProgress =='Y' and idx < len(col_names)):    if (Action_Type == '2'):        keyword = raw_input('Please input test item Name for drawing the chart(full_word)===>')        if (not keyword in col_names):              print 'Input [{0}] test item name can not found'.format(keyword)            continue    else:        keyword = col_names[idx]        idx += 1    newcontent = csvcontent[2:][keyword].dropna()    if (newcontent.count() == 0):        print 'Test item [{0}] =====> No valid data'.format(keyword)        continue    if (newcontent.dtype == np.float64 or newcontent.dtype == np.int64):        Upper_Limit = csvlimit[keyword][0]        Lower_Limit = csvlimit[keyword][1]        FName = keyword        for c in [':','/']:            FName = FName.replace(c,'-')        saveFileName = save_path+ '/' + station_name+ '_' + FName + '.png'        Func_DrawChart(newcontent,Upper_Limit,Lower_Limit,station_name,keyword,saveFileName)    if (Action_Type == '2'):        KeepProgress = raw_input('Want to keep drawing with another test item ?? (Y/N)===>')